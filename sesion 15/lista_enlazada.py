# -*- coding: utf-8 -*-
"""lista_enlazada.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FiE54MJa55OpcIchS68tCmxYMTwDiIWY
"""

class Nodo:
    def __init__(self, dato):
        self.dato = dato  # Establece el valor del nodo
        self.siguiente = None  # Inicializa el puntero al siguiente nodo como None

class ListaEnlazada:
    def __init__(self):
        self.cabeza = None  # La lista comienza vacía (no tiene nodos)
        self.tamaño = 0  # Inicializa el tamaño en 0

    def insertar_inicio(self, dato):
        nuevo = Nodo(dato)
        nuevo.siguiente = self.cabeza
        self.cabeza = nuevo
        self.tamaño += 1

    def insertar_final(self, dato):
        nuevo = Nodo(dato)
        if not self.cabeza:
            self.cabeza = nuevo
        else:
            actual = self.cabeza
            while actual.siguiente:
                actual = actual.siguiente
            actual.siguiente = nuevo
        self.tamaño += 1

    def mostrar(self):
        actual = self.cabeza
        while actual:
            print(actual.dato, end=' -> ')
            actual = actual.siguiente
        print('None')

    def obtener_tamaño(self):
        return self.tamaño

# Crear una lista enlazada
lista = ListaEnlazada()

# Insertar nodos al inicio
lista.insertar_inicio(10)
lista.insertar_inicio(5)

# Insertar nodos al final
lista.insertar_final(20)

# Mostrar la lista
lista.mostrar()  # Imprime: 5 -> 10 -> 20 -> None

# Obtener tamaño de la lista
print("Tamaño de la lista:", lista.obtener_tamaño())  # Imprime: 3

lista = ListaEnlazada()
lista.insertar_inicio(1)  # Inserta 1 al inicio
lista.insertar_inicio(2)  # Inserta 2 al inicio
lista.insertar_inicio(3)  # Inserta 3 al inicio
lista.mostrar()  # Imprime: 3 -> 2 -> 1 -> None

lista = ListaEnlazada()
lista.insertar_final(4)
lista.insertar_final(5)
lista.insertar_final(6)
lista.mostrar()  # Imprime: 4 -> 5 -> 6 -> None

### Ejercicio 3: Buscar un valor en la lista. ###

# Función para buscar un valor en la lista
def buscar(lista, valor):
    # Comienza desde el primer nodo (cabeza)
    actual = lista.cabeza
    # Recorre la lista mientras haya nodos
    while actual:
        # Si el valor del nodo actual es igual al valor buscado, devuelve True
        if actual.dato == valor:
            return True
        # Moverse al siguiente nodo
        actual = actual.siguiente
    # Si el valor no se encuentra en la lista, devuelve False
    return False

# Buscar el valor 5 en la lista
print(buscar(lista, 5))  # Imprime: True

# Buscar el valor 10 en la lista
print(buscar(lista, 10)) # Imprime: False

### Ejercicio 4: Eliminar un nodo dado un valor ###

# Función para eliminar un nodo con un valor específico
def eliminar(lista, valor):
    # Comienza desde el primer nodo (cabeza)
    actual = lista.cabeza
    # Inicializa el nodo previo como None
    previo = None
    # Recorre la lista
    while actual:
        # Si el valor del nodo actual es igual al valor a eliminar
        if actual.dato == valor:
            # Si el nodo a eliminar es el primero (cabeza)
            if previo:
                # Actualiza el puntero del nodo previo al siguiente nodo del actual
                previo.siguiente = actual.siguiente
            else:
                # Si es el primer nodo, mueve la cabeza al siguiente nodo
                lista.cabeza = actual.siguiente
            # Disminuye el tamaño de la lista
            lista.tamaño -= 1
            return
        # Moverse al siguiente nodo
        previo = actual
        actual = actual.siguiente

# Eliminar el nodo con valor 5 de la lista
eliminar(lista, 5)
# Mostrar la lista después de la eliminación
lista.mostrar()  # Imprime: 4 -> 6 -> None

# Función para contar los nodos en la lista
def contar(lista):
    # Retorna el tamaño de la lista, almacenado en el atributo tamaño
    return lista.obtener_tamaño()

# Contar la cantidad de nodos en la lista
print(contar(lista))  # Imprime: 2 (ya que quedan 2 nodos: 4 y 6)

### Ejercicio 6: Invertir una lista enlazada ###

# Función para invertir la lista
def invertir(lista):
    # Inicializa el puntero previo como None (no hay nodo previo inicialmente)
    previo = None
    # Comienza desde la cabeza de la lista
    actual = lista.cabeza
    # Recorre la lista
    while actual:
        # Guarda el siguiente nodo
        siguiente = actual.siguiente
        # Invertir la dirección del puntero "siguiente"
        actual.siguiente = previo
        # Avanzar los punteros: previo ahora apunta a "actual", y "actual" al siguiente nodo
        previo = actual
        actual = siguiente
    # Después de invertir, la cabeza debe ser el último nodo
    lista.cabeza = previo

# Invertir la lista
invertir(lista)
# Mostrar la lista invertida
lista.mostrar()  # Imprime: 6 -> 4 -> None

### Ejercicio 7: Insertar en una posición específica ###

# Función para insertar un nodo en una posición específica
def insertar_pos(lista, dato, pos):
    # Crear un nuevo nodo con el dato
    nuevo = Nodo(dato)
    # Si la posición es 0 (inicio de la lista), insertamos directamente en la cabeza
    if pos == 0:
        nuevo.siguiente = lista.cabeza
        lista.cabeza = nuevo
    else:
        # Si la posición no es 0, buscamos la posición
        actual = lista.cabeza
        for _ in range(pos - 1):
            # Si el nodo actual es None, significa que la posición no es válida
            if not actual:
                return
            actual = actual.siguiente
        # Insertamos el nodo nuevo en la posición deseada
        nuevo.siguiente = actual.siguiente
        actual.siguiente = nuevo
    # Aumentamos el tamaño de la lista
    lista.tamaño += 1

# Insertar el valor 99 en la posición 1
insertar_pos(lista, 99, 1)
# Mostrar la lista después de la inserción
lista.mostrar()  # Imprime: 6 -> 99 -> 4 -> None

### Ejercicio 8: Obtener el último nodo de la lista. ###
# Función para obtener el último nodo de la lista
def ultimo(lista):
    # Comienza desde la cabeza
    actual = lista.cabeza
    # Recorre la lista hasta llegar al último nodo
    while actual.siguiente:
        actual = actual.siguiente
    # Retorna el valor del último nodo
    return actual.dato

# Obtener el último nodo de la lista
print(ultimo(lista))  # Imprime: 4

### Ejercicio 9: Sumar todos los valores de la lista. ####

# Función para sumar todos los valores de la lista
def suma(lista):
    # Inicializa el total como 0
    total = 0
    # Comienza desde la cabeza
    actual = lista.cabeza
    # Recorre la lista y suma los valores
    while actual:
        total += actual.dato
        actual = actual.siguiente
    # Retorna la suma total
    return total

# Sumar todos los valores de la lista
print(suma(lista))  # Imprime: 109 (6 + 99 + 4)

### Ejercicio 10: Encontrar el valor máximo de la lista. ###

# Función para encontrar el valor máximo en la lista
def maximo(lista):
    # Comienza desde la cabeza y establece el valor mayor como el primer nodo
    actual = lista.cabeza
    mayor = actual.dato
    # Recorre la lista comparando los valores
    while actual:
        if actual.dato > mayor:
            mayor = actual.dato
        actual = actual.siguiente
    # Retorna el valor mayor encontrado
    return mayor

# Obtener el valor máximo de la lista
print(maximo(lista))  # Imprime: 99

### Ejercicio 11: Encontrar el valor mínimo de la lista. ###

# Función para encontrar el valor mínimo en la lista
def minimo(lista):
    # Comienza desde la cabeza
    actual = lista.cabeza
    # Inicializa la variable menor con el dato del primer nodo
    menor = actual.dato
    # Recorre la lista
    while actual:
        # Si el dato del nodo actual es menor que el valor menor encontrado, actualiza "menor"
        if actual.dato < menor:
            menor = actual.dato
        actual = actual.siguiente
    # Retorna el valor mínimo
    return menor

# Obtener el valor mínimo de la lista
print(minimo(lista))  # Imprime: 4

### Ejercicio 12: Convertir la lista enlazada a una lista de Python. ###

# Función para convertir la lista enlazada a una lista de Python
def a_lista(lista):
    # Inicializa una lista vacía
    arr = []
    # Comienza desde la cabeza
    actual = lista.cabeza
    # Recorre la lista y agrega cada dato a la lista Python
    while actual:
        arr.append(actual.dato)
        actual = actual.siguiente
    # Retorna la lista Python
    return arr

# Convertir la lista a una lista de Python
print(a_lista(lista))  # Imprime: [6, 99, 4]

### Ejercicio 13: Verificar si la lista está vacía. ###
# Función para verificar si la lista está vacía
def vacia(lista):
    # Si la cabeza de la lista es None, significa que está vacía
    return lista.cabeza is None

# Verificar si la lista está vacía
print(vacia(lista))  # Imprime: False (la lista no está vacía)

### Ejercicio 14: Duplicar todos los elementos en la lista. ###

# Función para duplicar los elementos de la lista
def duplicar(lista):
    # Comienza desde la cabeza
    actual = lista.cabeza
    # Recorre la lista
    while actual:
        # Crear un nuevo nodo con el mismo dato que el nodo actual
        nuevo = Nodo(actual.dato)
        # El siguiente nodo del nuevo nodo será el siguiente nodo del actual
        nuevo.siguiente = actual.siguiente
        # El nodo actual ahora apunta al nuevo nodo
        actual.siguiente = nuevo
        # Avanzamos al siguiente nodo
        actual = nuevo.siguiente

# Duplicar todos los elementos de la lista
duplicar(lista)
# Mostrar la lista después de duplicar los elementos
lista.mostrar()  # Imprime: 6 -> 6 -> 99 -> 99 -> 4 -> 4 -> None

### Ejercicio 15: Eliminar todos los nodos de la lista. ###

# Función para eliminar todos los nodos de la lista
def vaciar(lista):
    # Simplemente establece la cabeza de la lista como None
    # y resetea el tamaño a 0
    lista.cabeza = None
    lista.tamaño = 0

# Eliminar todos los nodos de la lista
vaciar(lista)
# Mostrar la lista después de eliminar todos los nodos
lista.mostrar()  # Imprime: None

# Crear una lista enlazada
lista = ListaEnlazada()

# Insertar personas con diccionarios (ID, nombre, edad)
persona1 = {"id": 1, "nombre": "Juan", "edad": 25}
persona2 = {"id": 2, "nombre": "Ana", "edad": 30}
persona3 = {"id": 3, "nombre": "Carlos", "edad": 22}

# Insertar al final
lista.insertar_final(persona1)
lista.insertar_final(persona2)
lista.insertar_final(persona3)

# Mostrar la lista
lista.mostrar()  # Esperado: muestra los diccionarios de las personas

# Función para buscar por nombre
def buscar_por_nombre(lista, nombre):
    actual = lista.cabeza
    while actual:
        if actual.dato["nombre"] == nombre:
            return actual.dato  # Retorna el diccionario completo
        actual = actual.siguiente
    return None

# Buscar a "Carlos" en la lista
resultado = buscar_por_nombre(lista, "Carlos")
print(resultado)  # Esperado: {'id': 3, 'nombre': 'Carlos', 'edad': 22}

# Función para eliminar por ID
def eliminar_por_id(lista, id_persona):
    actual = lista.cabeza
    previo = None
    while actual:
        if actual.dato["id"] == id_persona:
            if previo:
                previo.siguiente = actual.siguiente
            else:
                lista.cabeza = actual.siguiente
            lista.tamaño -= 1
            return
        previo = actual
        actual = actual.siguiente

# Eliminar la persona con ID 2
eliminar_por_id(lista, 2)

# Mostrar la lista después de la eliminación
lista.mostrar()  # Esperado: no debe mostrar la persona con ID 2

# Función para actualizar la edad
def actualizar_edad(lista, id_persona, nueva_edad):
    actual = lista.cabeza
    while actual:
        if actual.dato["id"] == id_persona:
            actual.dato["edad"] = nueva_edad  # Actualiza el campo "edad"
            return
        actual = actual.siguiente

# Actualizar la edad de la persona con ID 1 a 26
actualizar_edad(lista, 1, 26)

# Mostrar la lista después de la actualización
lista.mostrar()  # Esperado: el valor de la edad de la persona con ID 1 debe ser 26