# -*- coding: utf-8 -*-
"""Taller Sesion 14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gMmX7dMdyHcWUx3uXIOF0QDICOr6Zvxr
"""

# Lista inicial de compras
compras = ["leche", "pan"]

# Eliminar el elemento en la posición 1 (en este caso "pan")
compras.pop(1)

# Agregar "huevos" al final de la lista
compras.append("huevos")

# Mostrar la lista actualizada de compras
print(compras)

# Solicitar los datos al usuario
nombre = input("Introduce tu nombre: ")
edad = int(input("Introduce tu edad: "))  # Convertimos a entero porque la edad es un número
ciudad = input("Introduce tu ciudad: ")

# Crear el diccionario con el perfil del usuario
perfil_usuario = {
    "nombre": nombre,
    "edad": edad,
    "ciudad": ciudad
}

# Mostrar el diccionario final
for x in perfil_usuario:
    print(perfil_usuario[x])

# Almacenar las coordenadas en una tupla
coordenadas = (40.7128, -74.0060)  # Ejemplo: Nueva York (latitud, longitud)

# Desempaquetar la tupla en dos variables
latitud, longitud = coordenadas

# Imprimir las variables
print(f"Latitud: {latitud}")
print(f"Longitud: {longitud}")

temperaturas = [22.5, 24.0, 21.8, 25.1, 23.9, 22.7, 21.5]

# Calcular el promedio sumando todos los valores y dividiendo entre el número de elementos
promedio = sum(temperaturas) / len(temperaturas)

print(f"Temperaturas: {temperaturas}")
print(f"Promedio: {promedio}")

# Diccionario inglés -> español
traductor = {
    "hello": "hola",
    "world": "mundo",
    "cat": "gato",
    "dog": "perro",
    "food": "comida",
    "water": "agua",
    "book": "libro"
}

# Pedir al usuario una palabra en inglés
palabra = input("Introduce una palabra en inglés: ").lower()  # .lower() para ignorar mayúsculas/minúsculas

# Buscar la palabra en el diccionario y mostrar la traducción si existe
if palabra in traductor:
    print(f"La traducción de '{palabra}' es '{traductor[palabra]}'.")
else:
    print(f"Lo siento, no tengo la traducción para '{palabra}'.")

# Horario: (materia, hora)
horario = (
    ("Matemáticas", "08:00"),
    ("Historia", "10:00"),
    ("Ciencias", "12:00"),
)

# Recorrer e imprimir horario
for materia, hora in horario:
    print(f"Clase de {materia} a las {hora}")

invitados_dia = ["Ana", "Luis", "Marta", "Pedro"]
invitados_noche = ["Luis", "Sofía", "Ana", "Juan"]

# Unir listas y eliminar duplicados usando set
lista_final = list(set(invitados_dia + invitados_noche))

print(lista_final)

# Lista de diccionarios que representan productos
inventario = [
    {"nombre": "Leche", "precio": 1500, "stock": 20},
    {"nombre": "Pan", "precio": 800, "stock": 15},
    {"nombre": "Huevos", "precio": 2000, "stock": 30}
]

# Función para buscar producto por nombre
def buscar_producto(nombre):
    for producto in inventario:
        if producto["nombre"].lower() == nombre.lower():
            return producto
    return None

# Ejemplo de búsqueda
resultado = buscar_producto("pan")
print(resultado)

#ejercio 8

# Diccionario con estudiantes y sus listas de notas
notas_estudiantes = {
    "Ana": [8.5, 9.0, 7.5],
    "Luis": [7.0, 6.5, 8.0, 7.8],
    "Maria": [9.5, 8.0, 9.0]
}

# Imprimir cada estudiante y sus notas, uno debajo del otro
for estudiante, notas in notas_estudiantes.items():
    print(f"{estudiante}: {notas}")

# Lista original de números
numeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Crear una nueva lista con solo los números pares usando lista por comprensión
pares = [num for num in numeros if num % 2 == 0]

# Mostrar la nueva lista de números pares
print(pares)

# Lista de diccionarios con estudiantes
estudiantes = [
    {"nombre": "Ana", "promedio": 4.5, "curso": "10A"},
    {"nombre": "Luis", "promedio": 3.8, "curso": "10B"},
    {"nombre": "Marta", "promedio": 4.8, "curso": "10A"},
    {"nombre": "Pedro", "promedio": 3.9, "curso": "10C"},
    {"nombre": "Sofía", "promedio": 4.2, "curso": "10B"}
]

# Crear una lista con los nombres de estudiantes que tienen promedio mayor a 4.0
estudiantes_aprobados = [est["nombre"] for est in estudiantes if est["promedio"] > 4.0]

# Mostrar la lista resultante
print("Estudiantes con promedio superior a 4.0:")
print(estudiantes_aprobados)

# Lista de tuplas con ventas: (producto, categoría, monto)
ventas = [
    ("Laptop", "Electrónica", 1500),
    ("Camisa", "Ropa", 80),
    ("Mouse", "Electrónica", 50),
    ("Pantalón", "Ropa", 120),
    ("Teclado", "Electrónica", 70)
]

# Diccionario para almacenar el total de ventas por categoría
totales_por_categoria = {}

# Recorrer cada venta
for producto, categoria, monto in ventas:
    # Si la categoría no está en el diccionario, la inicializamos con 0
    if categoria not in totales_por_categoria:
        totales_por_categoria[categoria] = 0
    # Sumamos el monto de la venta a la categoría correspondiente
    totales_por_categoria[categoria] += monto

# Mostrar el resultado
print("Total de ventas por categoría:")
for categoria, total in totales_por_categoria.items():
    print(f"{categoria}: ${total}")

libro = {
    "titulo": "Python para Todos",
    "año": 2024,
    "autores": [
        {"nombre": "Raúl", "nacionalidad": "Española"},
        {"nombre": "Laura", "nacionalidad": "Mexicana"}
    ],
    "editorial": "Ediciones Código"
}

# Extraer lista de nombres de autores
nombres_autores = [autor["nombre"] for autor in libro["autores"]]

print(nombres_autores)

productos = {
    101: "Leche",
    102: "Pan",
    103: "Huevos"
}

precios = {
    101: 4500,
    102: 2500,
    103: 8000
}

ventas_del_dia = [
    (101, 5),  # Se vendieron 5 unidades de Leche
    (102, 10), # Se vendieron 10 unidades de Pan
    (101, 3),  # Se vendieron otras 3 unidades de Leche
    (103, 2)   # Se vendieron 2 unidades de Huevos
]

# Variable para acumular el ingreso total
ingreso_total = 0

# Recorrer cada venta
for producto_id, cantidad in ventas_del_dia:
    precio_unitario = precios.get(producto_id, 0)  # Obtener precio o 0 si no existe
    ingreso_total += precio_unitario * cantidad

print(f"Ingreso total del día: ${ingreso_total}")